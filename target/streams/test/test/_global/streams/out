[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(de.htwg.se.muehle.model.FieldSpec, org.scalatest.tools.Framework$$anon$1@7ab78da4, false, [SuiteSelector])[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(de.htwg.se.muehle.model.PieceSpec, org.scalatest.tools.Framework$$anon$1@7ab78da4, false, [SuiteSelector])[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(de.htwg.se.muehle.controller.ControllerSpec, org.scalatest.tools.Framework$$anon$1@7ab78da4, false, [SuiteSelector])[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(de.htwg.se.muehle.util.ObserverSpec, org.scalatest.tools.Framework$$anon$1@7ab78da4, false, [SuiteSelector])[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(de.htwg.se.muehle.aview.de.htwg.se.muehle.util.TUISpec, org.scalatest.tools.Framework$$anon$1@7ab78da4, false, [SuiteSelector])[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(de.htwg.se.muehle.model.MuehlMatrixSpec, org.scalatest.tools.Framework$$anon$1@7ab78da4, false, [SuiteSelector])[0m
[0m[[0m[0minfo[0m] [0m[0m[32mTUISpec:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mControllerSpec:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mA Controller[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should contain the Field that was handed over while creating the controller[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be able to update the Field and notifiying the Observers[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mPieceSpec:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mPiece[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should return the Letters B or W depending on choosing player1 or player2[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mMuehlMatrixSpec:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mA Matrix[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should being created using a dimension and a filling and consist out out of a Vatrix and a Vector[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should have a middlerow which width should be double the size[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should have a filling if you do so by using the fill methode[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should change the filling by using the replace and replaceMid methode[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should return the filling of a single cell by using the cell methode[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mObserverSpec:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mAn Observer[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should observe the others, perceive changes and notify them[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mFieldSpec:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mA field[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m  should contain a line(width: Int, depth: Int, pieces: Vector[Option[Piece]]) which[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m  - should produce a String containing - and #, W or B depending on parameters width and depth[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m  should contain a lineWLine(width: Int, space: Int, depth: Int, pieces: Vector[Option[Piece]]) which[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m  - should produce a String containing 2 lines with parameters width, space and depth[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m  should contain a wallWBar(width: Int, space: Int, depth: Int) which[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m  - should produce a String containing | and spaces with parameters width, space, and depth[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m  should contain a wallWWall(width: Int, space: Int, depth: Int) which[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m  - should produce a String containing | and spaces with parameters, width, space and depth[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m  should contain a wallWLine(width: Int, space: Int, depth: Int, pieces: Vector[Option[Piece]]) which[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m  - should produce a String containing |, -, (#, b or w) and spaces with parameters width, space and depth[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m  should contain a mesh() method which[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m  - should return a String looking like a muehle-field which size is depending on the size parameter[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m  should contain a put(stone: Option[Piece],x: Int, y: Int) which[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m  - should change the Entries in the given matrix by changing '#' to either 'B' or 'W' on the given Coordinates[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[36mRun completed in 233 milliseconds.[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[36mTotal number of tests run: 16[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[36mSuites: completed 6, aborted 0[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[36mTests: succeeded 16, failed 0, canceled 0, ignored 0, pending 0[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mAll tests passed.[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mPassed tests:[0m
[0m[[0m[0mdebug[0m] [0m[0m	de.htwg.se.muehle.util.ObserverSpec[0m
[0m[[0m[0mdebug[0m] [0m[0m	de.htwg.se.muehle.model.PieceSpec[0m
[0m[[0m[0mdebug[0m] [0m[0m	de.htwg.se.muehle.controller.ControllerSpec[0m
[0m[[0m[0mdebug[0m] [0m[0m	de.htwg.se.muehle.aview.de.htwg.se.muehle.util.TUISpec[0m
[0m[[0m[0mdebug[0m] [0m[0m	de.htwg.se.muehle.model.MuehlMatrixSpec[0m
[0m[[0m[0mdebug[0m] [0m[0m	de.htwg.se.muehle.model.FieldSpec[0m
